# Calculer le poids : proportion des parcelles de ce type
poids_forestiers[i] <- nrow(parcelles_type_forestier) / nrow(densite_centree_reduite)
# Calcul du barycentre pour chaque type forestier (moyenne par espèce)
barycentres_forestiers[i, ] <- colMeans(parcelles_type_forestier)
# Calcul de la norme euclidienne carrée pour chaque type forestier
normes_euclidiennes_carre[i] <- sum(barycentres_forestiers[i, ]^2)
}
#### 2.2 Calcul de l'inertie inter-types et du R2 (coefficient de détermination) ####
### Inertie inter-types
inertie_inter_types <- sum(poids_forestiers * normes_euclidiennes_carre)
### Coefficient de détermination R2
R2 <- inertie_inter_types / inertie_totale
#### 2.3 Pourcentage d'information (variabilité du peuplement) ####
pourcentage_information <- R2 * 100
#### 3.1 Calcul de la variance totale et de la variance inter-types pour chaque espèce ####
### Variance totale
variance_totale_par_espece <- colSums(densite_centree_reduite^2) / (n - 1)
### Variance inter-types
variance_inter_types_par_espece <- numeric(ncol(densite_centree_reduite))
# Boucle pour chaque espèce
for (j in 1:ncol(densite_centree_reduite)) {
# On calcule la variance inter-types pour l'espèce j
variance_inter_types_par_espece[j] <- sum(poids_forestiers * (barycentres_forestiers[, j]^2))
}
#### 3.2 Calcul du R2 pour chaque espèce ####
R2_par_espece <- variance_inter_types_par_espece / variance_totale_par_espece
#### 3.3 Identification des espèces les plus et les moins liées au type forestier ####
especes_most_liees <- names(sort(R2_par_espece, decreasing = TRUE))[1:5]  # Les 5 espèces les plus liées
especes_least_liees <- names(sort(R2_par_espece, decreasing = FALSE))[1:5]  # Les 5 espèces les moins liées
#### 3.4 Calcul des R2 pour chaque espèce ####
R2_par_espece <- variance_inter_types_par_espece / variance_totale_par_espece
#### 3.5 Calcul de la moyenne arithmétique des R2 des espèces ####
moyenne_R2_especes <- mean(R2_par_espece)
#### 3.6 Vérification que le R2 de la partition est égal à la moyenne des R2 des variables ####
verification_R2 <- R2 == moyenne_R2_especes
# Partie 2 ----
#### 1.1 Calcul Projection Y ####
### 1.1.1 Préliminaires : création des matrices
X <- densite_centree_reduite
dim(X)
Y <- model.matrix(~ as.factor(forest) - 1, data=data)
colnames(Y) <- paste("type", seq_along(levels(as.factor(data$forest))))
W <- diag(1/n, n, n)  # Matrice de poids équipondérés
M <- diag(1/p, p, p)  # Matrice de poids pour les variables
### 1.1.2 Calcul
Pi_Y <- Y %*% solve(t(Y) %*% W %*% Y) %*% t(Y) %*% W  #solve donne l'inverse de Y'WY
#### 1.2 Calcul Pi_xj et tr(Pi_Y*Pi_xj ####
tr_Pi_xj_PiY <- numeric(p)
for (j in 1:p) {
x_j <- X[, j]
Pi_xj <- x_j %*% solve(t(x_j) %*% W %*% x_j) %*% t(x_j) %*% W
tr_Pi_xj_PiY[j] <- sum(diag(Pi_xj %*% Pi_Y))
}
sum(tr_Pi_xj_PiY)
#### 1.3 Calcul de tr(RPI_Y)
R <- X %*% M %*% t(X) %*% W
trace_R_Pi_Y <- sum(diag(R %*% Pi_Y))
#### 2.1 Calcul de tr(Pi_xj*Pi_Z) ####
### 2.1.1 Création matrice Z
Z <- model.matrix(~ as.factor(geology) - 1, data=data)
colnames(Z) <- paste0("geology",setdiff(1:6, 4)) #il n'y a pas de 4 pour geology
### 2.1.2 Calcul Pi_Z
Pi_Z <- Z %*% solve(t(Z) %*% W %*% Z) %*% t(Z) %*% W
### 2.1.3 Calcul
tr_Pi_xj_PiZ <- numeric(p)
for (j in 1:p) {
x_j <- X[, j]
Pi_x_j <- x_j %*% solve(t(x_j) %*% W %*% x_j) %*% t(x_j) %*% W
tr_Pi_xj_PiZ[j] <- sum(diag(Pi_x_j %*% Pi_Z))  # trace(Pi_x_j * Pi_Z)
}
#### 2.2 Calcul de tr(RPi_Z) ####
tr_R_Pi_Z <- sum(diag(R %*% Pi_Z))
# Sauvegarde pour Rmd ----
save.image(file = "ressources/prepa.RData")
R2_par_espece
R2_par_espece
Datagenus <- read.csv("data/Datagenus.csv", sep=";")
data <- Datagenus[1:1000,] # On ne prend pas la ligne 1001
especes <- paste0("gen", 1:27)
colonnes_selectionnees <- c(especes, "surface", "forest", "geology")
data <- data[, colonnes_selectionnees]
densite_peuplement <- as.matrix(data[especes] / data$surface) # Conversion en matrice
moyennes_especes <- (colMeans(densite_peuplement))
### Calcul des écarts-types pour chaque espèce (colonne)
n <- nrow(densite_peuplement)
p <- ncol(densite_peuplement)
mat_moyenne <- matrix(moyennes_especes, nrow = n, ncol = p, byrow = TRUE)
sd_especes <- sqrt(colSums((densite_peuplement - mat_moyenne)^2) / (n - 1)) #racine de la variance sans-biais
mat_sd <- matrix(sd_especes, nrow = n, ncol = p, byrow = TRUE)
densite_centree_reduite <- (densite_peuplement - mat_moyenne) / mat_sd
### 1.3.1 Barycentre à l'origine (moyennes des colonnes proches de 0)
#summary(densite_centree_reduite)
moyennes_apres_centrage <- colMeans(densite_centree_reduite)
test_barycentre_a_l_origine <- all(abs(moyennes_apres_centrage) < 1e-10)
### 1.3.2 Inertie totale (variances des colonnes proches de 1)
# Variance par colonne
variances_apres_centrage <- colSums(densite_centree_reduite^2) / (n-1)
# Inertie totale = somme des variances
inertie_totale <- sum(variances_apres_centrage)
### Identification des types forestiers
types_forestiers <- unique(data$forest)
### Création d'une matrice pour les poids, barycentres et normes euclidiennes carrées
d <- length(types_forestiers)
poids_forestiers <- numeric(d)
barycentres_forestiers <- matrix(0, nrow = d, ncol = p) #p=ncol(densite_centree_reduite)
normes_euclidiennes_carre <- numeric(d)
for (i in 1:d) {
# Filtrer les parcelles appartenant à chaque type forestier
parcelles_type_forestier <- densite_centree_reduite[data$forest == types_forestiers[i], ]
# Calculer le poids : proportion des parcelles de ce type
poids_forestiers[i] <- nrow(parcelles_type_forestier) / nrow(densite_centree_reduite)
# Calcul du barycentre pour chaque type forestier (moyenne par espèce)
barycentres_forestiers[i, ] <- colMeans(parcelles_type_forestier)
# Calcul de la norme euclidienne carrée pour chaque type forestier
normes_euclidiennes_carre[i] <- sum(barycentres_forestiers[i, ]^2)
}
### Inertie inter-types
inertie_inter_types <- sum(poids_forestiers * normes_euclidiennes_carre)
### Coefficient de détermination R2
R2 <- inertie_inter_types / inertie_totale
#### 2.3 Pourcentage d'information (variabilité du peuplement) ####
pourcentage_information <- R2 * 100
### Variance totale
variance_totale_par_espece <- colSums(densite_centree_reduite^2) / (n - 1)
### Variance inter-types
variance_inter_types_par_espece <- numeric(ncol(densite_centree_reduite))
# Boucle pour chaque espèce
for (j in 1:ncol(densite_centree_reduite)) {
# On calcule la variance inter-types pour l'espèce j
variance_inter_types_par_espece[j] <- sum(poids_forestiers * (barycentres_forestiers[, j]^2))
}
#### 3.2 Calcul du R2 pour chaque espèce ####
R2_par_espece <- variance_inter_types_par_espece / variance_totale_par_espece
R2_par_espece
#### 3.3 Identification des espèces les plus et les moins liées au type forestier ####
especes_most_liees <- names(sort(R2_par_espece, decreasing = TRUE))[1:5]  # Les 5 espèces les plus liées
especes_least_liees <- names(sort(R2_par_espece, decreasing = FALSE))[1:5]  # Les 5 espèces les moins liées
especes_most_liees
especes_least_liees
#### 3.3 Identification des espèces les plus et les moins liées au type forestier ####
especes_most_liees <- (sort(R2_par_espece, decreasing = TRUE))[1:5]  # Les 5 espèces les plus liées
especes_least_liees <- (sort(R2_par_espece, decreasing = FALSE))[1:5]  # Les 5 espèces les moins liées
especes_least_liees
# En tête ----
#Desc : DM1 ADM
#Date: 02/10/2024
#Auteur : EL MAZZOUJI Wahel & GILLET Louison
# Dataframe ----
Datagenus <- read.csv("data/Datagenus.csv", sep=";")
data <- Datagenus[1:1000,] # On ne prend pas la ligne 1001
especes <- paste0("gen", 1:27)
colonnes_selectionnees <- c(especes, "surface", "forest", "geology")
data <- data[, colonnes_selectionnees]
# Partie 1 ----
#### 1.1 Calcul de la densité de peuplement pour chaque espèce (gen1 à gen27) ####
densite_peuplement <- as.matrix(data[especes] / data$surface) # Conversion en matrice
#### 1.2 Centrage et réduction avec des opérations matricielles ####
### Calcul des moyennes pour chaque espèce (colonne)
moyennes_especes <- (colMeans(densite_peuplement))
### Calcul des écarts-types pour chaque espèce (colonne)
n <- nrow(densite_peuplement)
p <- ncol(densite_peuplement)
mat_moyenne <- matrix(moyennes_especes, nrow = n, ncol = p, byrow = TRUE)
#remplit chaque ligne avec la densité de la colonne
sd_especes <- sqrt(colSums((densite_peuplement - mat_moyenne)^2) / (n - 1)) #racine de la variance sans-biais
### Centrage et réduction : on soustrait les moyennes et on divise par l'écart-type
mat_sd <- matrix(sd_especes, nrow = n, ncol = p, byrow = TRUE)
#idem avec l'écart-type
densite_centree_reduite <- (densite_peuplement - mat_moyenne) / mat_sd
#### 1.3 Barycentre et inertie ####
### 1.3.1 Barycentre à l'origine (moyennes des colonnes proches de 0)
#summary(densite_centree_reduite)
moyennes_apres_centrage <- colMeans(densite_centree_reduite)
test_barycentre_a_l_origine <- all(abs(moyennes_apres_centrage) < 1e-10)
### 1.3.2 Inertie totale (variances des colonnes proches de 1)
# Variance par colonne
variances_apres_centrage <- colSums(densite_centree_reduite^2) / (n-1)
# Inertie totale = somme des variances
inertie_totale <- sum(variances_apres_centrage)
#### 2.1 Calcul des poids, barycentres des types forestiers et normes euclidiennes de ces barycentres ####
### Identification des types forestiers
types_forestiers <- unique(data$forest)
### Création d'une matrice pour les poids, barycentres et normes euclidiennes carrées
d <- length(types_forestiers)
poids_forestiers <- numeric(d)
barycentres_forestiers <- matrix(0, nrow = d, ncol = p) #p=ncol(densite_centree_reduite)
normes_euclidiennes_carre <- numeric(d)
### Calcul par opérations matricielles
for (i in 1:d) {
# Filtrer les parcelles appartenant à chaque type forestier
parcelles_type_forestier <- densite_centree_reduite[data$forest == types_forestiers[i], ]
# Calculer le poids : proportion des parcelles de ce type
poids_forestiers[i] <- nrow(parcelles_type_forestier) / nrow(densite_centree_reduite)
# Calcul du barycentre pour chaque type forestier (moyenne par espèce)
barycentres_forestiers[i, ] <- colMeans(parcelles_type_forestier)
# Calcul de la norme euclidienne carrée pour chaque type forestier
normes_euclidiennes_carre[i] <- sum(barycentres_forestiers[i, ]^2)
}
#### 2.2 Calcul de l'inertie inter-types et du R2 (coefficient de détermination) ####
### Inertie inter-types
inertie_inter_types <- sum(poids_forestiers * normes_euclidiennes_carre)
### Coefficient de détermination R2
R2 <- inertie_inter_types / inertie_totale
#### 2.3 Pourcentage d'information (variabilité du peuplement) ####
pourcentage_information <- R2 * 100
#### 3.1 Calcul de la variance totale et de la variance inter-types pour chaque espèce ####
### Variance totale
variance_totale_par_espece <- colSums(densite_centree_reduite^2) / (n - 1)
### Variance inter-types
variance_inter_types_par_espece <- numeric(ncol(densite_centree_reduite))
# Boucle pour chaque espèce
for (j in 1:ncol(densite_centree_reduite)) {
# On calcule la variance inter-types pour l'espèce j
variance_inter_types_par_espece[j] <- sum(poids_forestiers * (barycentres_forestiers[, j]^2))
}
#### 3.2 Calcul du R2 pour chaque espèce ####
R2_par_espece <- variance_inter_types_par_espece / variance_totale_par_espece
#### 3.3 Identification des espèces les plus et les moins liées au type forestier ####
especes_most_liees <- (sort(R2_par_espece, decreasing = TRUE))[1:5]  # Les 5 espèces les plus liées
especes_least_liees <- (sort(R2_par_espece, decreasing = FALSE))[1:5]  # Les 5 espèces les moins liées
#### 3.4 Calcul de la moyenne arithmétique des R2 des espèces ####
moyenne_R2_especes <- mean(R2_par_espece)
#### 3.5 Vérification que le R2 de la partition est égal à la moyenne des R2 des variables ####
verification_R2 <- R2 == moyenne_R2_especes
# Partie 2 ----
#### 1.1 Calcul Projection Y ####
### 1.1.1 Préliminaires : création des matrices
X <- densite_centree_reduite
dim(X)
Y <- model.matrix(~ as.factor(forest) - 1, data=data)
colnames(Y) <- paste("type", seq_along(levels(as.factor(data$forest))))
W <- diag(1/n, n, n)  # Matrice de poids équipondérés
M <- diag(1/p, p, p)  # Matrice de poids pour les variables
### 1.1.2 Calcul
Pi_Y <- Y %*% solve(t(Y) %*% W %*% Y) %*% t(Y) %*% W  #solve donne l'inverse de Y'WY
#### 1.2 Calcul Pi_xj et tr(Pi_Y*Pi_xj ####
tr_Pi_xj_PiY <- numeric(p)
for (j in 1:p) {
x_j <- X[, j]
Pi_xj <- x_j %*% solve(t(x_j) %*% W %*% x_j) %*% t(x_j) %*% W
tr_Pi_xj_PiY[j] <- sum(diag(Pi_xj %*% Pi_Y))
}
sum(tr_Pi_xj_PiY)
#### 1.3 Calcul de tr(RPI_Y)
R <- X %*% M %*% t(X) %*% W
trace_R_Pi_Y <- sum(diag(R %*% Pi_Y))
#### 2.1 Calcul de tr(Pi_xj*Pi_Z) ####
### 2.1.1 Création matrice Z
Z <- model.matrix(~ as.factor(geology) - 1, data=data)
colnames(Z) <- paste0("geology",setdiff(1:6, 4)) #il n'y a pas de 4 pour geology
### 2.1.2 Calcul Pi_Z
Pi_Z <- Z %*% solve(t(Z) %*% W %*% Z) %*% t(Z) %*% W
### 2.1.3 Calcul
tr_Pi_xj_PiZ <- numeric(p)
for (j in 1:p) {
x_j <- X[, j]
Pi_x_j <- x_j %*% solve(t(x_j) %*% W %*% x_j) %*% t(x_j) %*% W
tr_Pi_xj_PiZ[j] <- sum(diag(Pi_x_j %*% Pi_Z))  # trace(Pi_x_j * Pi_Z)
}
#### 2.2 Calcul de tr(RPi_Z) ####
tr_R_Pi_Z <- sum(diag(R %*% Pi_Z))
# Sauvegarde pour Rmd ----
save.image(file = "ressources/prepa.RData")
especes_least_liees
especes_most_liees
sum(tr_Pi_xj_PiY)
tr_Pi_xj_PiY
sum(tr_Pi_xj_PiY)
Pi_Y
tr_Pi_xj_PiY
trace_R_Pi_Y
# En tête ----
#Desc : DM1 ADM
#Date: 02/10/2024
#Auteur : EL MAZZOUJI Wahel & GILLET Louison
# Dataframe ----
Datagenus <- read.csv("data/Datagenus.csv", sep=";")
data <- Datagenus[1:1000,] # On ne prend pas la ligne 1001
especes <- paste0("gen", 1:27)
colonnes_selectionnees <- c(especes, "surface", "forest", "geology")
data <- data[, colonnes_selectionnees]
# Partie 1 ----
#### 1.1 Calcul de la densité de peuplement pour chaque espèce (gen1 à gen27) ####
densite_peuplement <- as.matrix(data[especes] / data$surface) # Conversion en matrice
#### 1.2 Centrage et réduction avec des opérations matricielles ####
### Calcul des moyennes pour chaque espèce (colonne)
moyennes_especes <- (colMeans(densite_peuplement))
### Calcul des écarts-types pour chaque espèce (colonne)
n <- nrow(densite_peuplement)
p <- ncol(densite_peuplement)
mat_moyenne <- matrix(moyennes_especes, nrow = n, ncol = p, byrow = TRUE)
#remplit chaque ligne avec la densité de la colonne
sd_especes <- sqrt(colSums((densite_peuplement - mat_moyenne)^2) / (n - 1)) #racine de la variance sans-biais
### Centrage et réduction : on soustrait les moyennes et on divise par l'écart-type
mat_sd <- matrix(sd_especes, nrow = n, ncol = p, byrow = TRUE)
#idem avec l'écart-type
densite_centree_reduite <- (densite_peuplement - mat_moyenne) / mat_sd
#### 1.3 Barycentre et inertie ####
### 1.3.1 Barycentre à l'origine (moyennes des colonnes proches de 0)
#summary(densite_centree_reduite)
moyennes_apres_centrage <- colMeans(densite_centree_reduite)
test_barycentre_a_l_origine <- all(abs(moyennes_apres_centrage) < 1e-10)
### 1.3.2 Inertie totale (variances des colonnes proches de 1)
# Variance par colonne
variances_apres_centrage <- colSums(densite_centree_reduite^2) / (n-1)
# Inertie totale = somme des variances
inertie_totale <- sum(variances_apres_centrage)
#### 2.1 Calcul des poids, barycentres des types forestiers et normes euclidiennes de ces barycentres ####
### Identification des types forestiers
types_forestiers <- unique(data$forest)
### Création d'une matrice pour les poids, barycentres et normes euclidiennes carrées
d <- length(types_forestiers)
poids_forestiers <- numeric(d)
barycentres_forestiers <- matrix(0, nrow = d, ncol = p) #p=ncol(densite_centree_reduite)
normes_euclidiennes_carre <- numeric(d)
### Calcul par opérations matricielles
for (i in 1:d) {
# Filtrer les parcelles appartenant à chaque type forestier
parcelles_type_forestier <- densite_centree_reduite[data$forest == types_forestiers[i], ]
# Calculer le poids : proportion des parcelles de ce type
poids_forestiers[i] <- nrow(parcelles_type_forestier) / nrow(densite_centree_reduite)
# Calcul du barycentre pour chaque type forestier (moyenne par espèce)
barycentres_forestiers[i, ] <- colMeans(parcelles_type_forestier)
# Calcul de la norme euclidienne carrée pour chaque type forestier
normes_euclidiennes_carre[i] <- sum(barycentres_forestiers[i, ]^2)
}
#### 2.2 Calcul de l'inertie inter-types et du R2 (coefficient de détermination) ####
### Inertie inter-types
inertie_inter_types <- sum(poids_forestiers * normes_euclidiennes_carre)
### Coefficient de détermination R2
R2 <- inertie_inter_types / inertie_totale
#### 2.3 Pourcentage d'information (variabilité du peuplement) ####
pourcentage_information <- R2 * 100
#### 3.1 Calcul de la variance totale et de la variance inter-types pour chaque espèce ####
### Variance totale
variance_totale_par_espece <- colSums(densite_centree_reduite^2) / (n - 1)
### Variance inter-types
variance_inter_types_par_espece <- numeric(ncol(densite_centree_reduite))
# Boucle pour chaque espèce
for (j in 1:ncol(densite_centree_reduite)) {
# On calcule la variance inter-types pour l'espèce j
variance_inter_types_par_espece[j] <- sum(poids_forestiers * (barycentres_forestiers[, j]^2))
}
#### 3.2 Calcul du R2 pour chaque espèce ####
R2_par_espece <- variance_inter_types_par_espece / variance_totale_par_espece
#### 3.3 Identification des espèces les plus et les moins liées au type forestier ####
especes_most_liees <- (sort(R2_par_espece, decreasing = TRUE))[1:5]  # Les 5 espèces les plus liées
especes_least_liees <- (sort(R2_par_espece, decreasing = FALSE))[1:5]  # Les 5 espèces les moins liées
#### 3.4 Calcul de la moyenne arithmétique des R2 des espèces ####
moyenne_R2_especes <- mean(R2_par_espece)
#### 3.5 Vérification que le R2 de la partition est égal à la moyenne des R2 des variables ####
verification_R2 <- R2 == moyenne_R2_especes
# Partie 2 ----
#### 1.1 Calcul Projection Y ####
### 1.1.1 Préliminaires : création des matrices
X <- densite_centree_reduite
dim(X)
Y <- model.matrix(~ as.factor(forest) - 1, data=data)
colnames(Y) <- paste("type", seq_along(levels(as.factor(data$forest))))
W <- diag(1/n, n, n)  # Matrice de poids équipondérés
M <- diag(1/p, p, p)  # Matrice de poids pour les variables
### 1.1.2 Calcul
Pi_Y <- Y %*% solve(t(Y) %*% W %*% Y) %*% t(Y) %*% W  #solve donne l'inverse de Y'WY
#### 1.2 Calcul Pi_xj et tr(Pi_Y*Pi_xj ####
tr_Pi_xj_PiY <- numeric(p)
for (j in 1:p) {
x_j <- X[, j]
Pi_xj <- x_j %*% solve(t(x_j) %*% W %*% x_j) %*% t(x_j) %*% W
tr_Pi_xj_PiY[j] <- sum(diag(Pi_xj %*% Pi_Y))
}
View(barycentres_forestiers)
View(normes_euclidiennes_carre)
normes_euclidiennes_carre
### Identification des types forestiers
types_forestiers <- sort(unique(data$forest))
### Création d'une matrice pour les poids, barycentres et normes euclidiennes carrées
d <- length(types_forestiers)
poids_forestiers <- numeric(d)
barycentres_forestiers <- matrix(0, nrow = d, ncol = p) #p=ncol(densite_centree_reduite)
normes_euclidiennes_carre <- numeric(d)
for (i in 1:d) {
# Filtrer les parcelles appartenant à chaque type forestier
parcelles_type_forestier <- densite_centree_reduite[data$forest == types_forestiers[i], ]
# Calculer le poids : proportion des parcelles de ce type
poids_forestiers[i] <- nrow(parcelles_type_forestier) / nrow(densite_centree_reduite)
# Calcul du barycentre pour chaque type forestier (moyenne par espèce)
barycentres_forestiers[i, ] <- colMeans(parcelles_type_forestier)
# Calcul de la norme euclidienne carrée pour chaque type forestier
normes_euclidiennes_carre[i] <- sum(barycentres_forestiers[i, ]^2)
}
### Inertie inter-types
inertie_inter_types <- sum(poids_forestiers * normes_euclidiennes_carre)
# En tête ----
#Desc : DM1 ADM
#Date: 02/10/2024
#Auteur : EL MAZZOUJI Wahel & GILLET Louison
# Dataframe ----
Datagenus <- read.csv("data/Datagenus.csv", sep=";")
data <- Datagenus[1:1000,] # On ne prend pas la ligne 1001
especes <- paste0("gen", 1:27)
colonnes_selectionnees <- c(especes, "surface", "forest", "geology")
data <- data[, colonnes_selectionnees]
# Partie 1 ----
#### 1.1 Calcul de la densité de peuplement pour chaque espèce (gen1 à gen27) ####
densite_peuplement <- as.matrix(data[especes] / data$surface) # Conversion en matrice
#### 1.2 Centrage et réduction avec des opérations matricielles ####
### Calcul des moyennes pour chaque espèce (colonne)
moyennes_especes <- (colMeans(densite_peuplement))
### Calcul des écarts-types pour chaque espèce (colonne)
n <- nrow(densite_peuplement)
p <- ncol(densite_peuplement)
mat_moyenne <- matrix(moyennes_especes, nrow = n, ncol = p, byrow = TRUE)
#remplit chaque ligne avec la densité de la colonne
sd_especes <- sqrt(colSums((densite_peuplement - mat_moyenne)^2) / (n - 1)) #racine de la variance sans-biais
### Centrage et réduction : on soustrait les moyennes et on divise par l'écart-type
mat_sd <- matrix(sd_especes, nrow = n, ncol = p, byrow = TRUE)
#idem avec l'écart-type
densite_centree_reduite <- (densite_peuplement - mat_moyenne) / mat_sd
#### 1.3 Barycentre et inertie ####
### 1.3.1 Barycentre à l'origine (moyennes des colonnes proches de 0)
#summary(densite_centree_reduite)
moyennes_apres_centrage <- colMeans(densite_centree_reduite)
test_barycentre_a_l_origine <- all(abs(moyennes_apres_centrage) < 1e-10)
### 1.3.2 Inertie totale (variances des colonnes proches de 1)
# Variance par colonne
variances_apres_centrage <- colSums(densite_centree_reduite^2) / (n-1)
# Inertie totale = somme des variances
inertie_totale <- sum(variances_apres_centrage)
#### 2.1 Calcul des poids, barycentres des types forestiers et normes euclidiennes de ces barycentres ####
### Identification des types forestiers
types_forestiers <- sort(unique(data$forest))
### Création d'une matrice pour les poids, barycentres et normes euclidiennes carrées
d <- length(types_forestiers)
poids_forestiers <- numeric(d)
barycentres_forestiers <- matrix(0, nrow = d, ncol = p) #p=ncol(densite_centree_reduite)
normes_euclidiennes_carre <- numeric(d)
### Calcul par opérations matricielles
for (i in 1:d) {
# Filtrer les parcelles appartenant à chaque type forestier
parcelles_type_forestier <- densite_centree_reduite[data$forest == types_forestiers[i], ]
# Calculer le poids : proportion des parcelles de ce type
poids_forestiers[i] <- nrow(parcelles_type_forestier) / nrow(densite_centree_reduite)
# Calcul du barycentre pour chaque type forestier (moyenne par espèce)
barycentres_forestiers[i, ] <- colMeans(parcelles_type_forestier)
# Calcul de la norme euclidienne carrée pour chaque type forestier
normes_euclidiennes_carre[i] <- sum(barycentres_forestiers[i, ]^2)
}
#### 2.2 Calcul de l'inertie inter-types et du R2 (coefficient de détermination) ####
### Inertie inter-types
inertie_inter_types <- sum(poids_forestiers * normes_euclidiennes_carre)
### Coefficient de détermination R2
R2 <- inertie_inter_types / inertie_totale
#### 2.3 Pourcentage d'information (variabilité du peuplement) ####
pourcentage_information <- R2 * 100
#### 3.1 Calcul de la variance totale et de la variance inter-types pour chaque espèce ####
### Variance totale
variance_totale_par_espece <- colSums(densite_centree_reduite^2) / (n - 1)
### Variance inter-types
variance_inter_types_par_espece <- numeric(ncol(densite_centree_reduite))
# Boucle pour chaque espèce
for (j in 1:ncol(densite_centree_reduite)) {
# On calcule la variance inter-types pour l'espèce j
variance_inter_types_par_espece[j] <- sum(poids_forestiers * (barycentres_forestiers[, j]^2))
}
#### 3.2 Calcul du R2 pour chaque espèce ####
R2_par_espece <- variance_inter_types_par_espece / variance_totale_par_espece
#### 3.3 Identification des espèces les plus et les moins liées au type forestier ####
especes_most_liees <- (sort(R2_par_espece, decreasing = TRUE))[1:5]  # Les 5 espèces les plus liées
especes_least_liees <- (sort(R2_par_espece, decreasing = FALSE))[1:5]  # Les 5 espèces les moins liées
#### 3.4 Calcul de la moyenne arithmétique des R2 des espèces ####
moyenne_R2_especes <- mean(R2_par_espece)
#### 3.5 Vérification que le R2 de la partition est égal à la moyenne des R2 des variables ####
verification_R2 <- R2 == moyenne_R2_especes
# Partie 2 ----
#### 1.1 Calcul Projection Y ####
### 1.1.1 Préliminaires : création des matrices
X <- densite_centree_reduite
dim(X)
Y <- model.matrix(~ as.factor(forest) - 1, data=data)
colnames(Y) <- paste("type", seq_along(levels(as.factor(data$forest))))
W <- diag(1/n, n, n)  # Matrice de poids équipondérés
M <- diag(1/p, p, p)  # Matrice de poids pour les variables
### 1.1.2 Calcul
Pi_Y <- Y %*% solve(t(Y) %*% W %*% Y) %*% t(Y) %*% W  #solve donne l'inverse de Y'WY
#### 1.2 Calcul Pi_xj et tr(Pi_Y*Pi_xj ####
tr_Pi_xj_PiY <- numeric(p)
for (j in 1:p) {
x_j <- X[, j]
Pi_xj <- x_j %*% solve(t(x_j) %*% W %*% x_j) %*% t(x_j) %*% W
tr_Pi_xj_PiY[j] <- sum(diag(Pi_xj %*% Pi_Y))
}
#### 1.3 Calcul de tr(RPI_Y)
R <- X %*% M %*% t(X) %*% W
trace_R_Pi_Y <- sum(diag(R %*% Pi_Y))
#### 2.1 Calcul de tr(Pi_xj*Pi_Z) ####
### 2.1.1 Création matrice Z
Z <- model.matrix(~ as.factor(geology) - 1, data=data)
colnames(Z) <- paste0("geology",setdiff(1:6, 4)) #il n'y a pas de 4 pour geology
### 2.1.2 Calcul Pi_Z
Pi_Z <- Z %*% solve(t(Z) %*% W %*% Z) %*% t(Z) %*% W
### 2.1.3 Calcul
tr_Pi_xj_PiZ <- numeric(p)
for (j in 1:p) {
x_j <- X[, j]
Pi_x_j <- x_j %*% solve(t(x_j) %*% W %*% x_j) %*% t(x_j) %*% W
tr_Pi_xj_PiZ[j] <- sum(diag(Pi_x_j %*% Pi_Z))  # trace(Pi_x_j * Pi_Z)
}
#### 2.2 Calcul de tr(RPi_Z) ####
tr_R_Pi_Z <- sum(diag(R %*% Pi_Z))
# Sauvegarde pour Rmd ----
save.image(file = "ressources/prepa.RData")
poids_forestiers
